<!-- <center><img src="http://mooc.e-yantra.org/img/eYantra_logo.svg" alt="e-yantra_logo" style="scale:75%;" /></center> -->

<style>
.back{
	position: fixed;
	width: 250px;
	height: 250px;
	top: 50%;
	left: 50%;
    margin-top: auto; 
    margin-left: auto; 
	opacity: 0.15;
    z-index: -1;
	}
</style>
<!-- <img src="http://mooc.e-yantra.org/img/EyantraLogoMini.png" class="back"> -->

<center><h2><b><u>Seven  Segment  Display</u></center></h2></b>


<center><h2> 1. Introduction</h2></center>

***

<p align="justify" class="main">
The Seven Segment display has seven LEDs arranged into the number eight.  They  are  both cost-effective and easy to use.  The Figure 1 shows a standard seven-segment 
display.</p>

<p align="center">
  <img src="./images/7_seg/Display/SevenLEDs.png">
</p> 
<center>Figure 1:  Seven Segment Display</center>


<p align="justify" class="main">There  are  two  types  of  seven-segment  displays,  <b>Common  Anode</b> and <b>Common Cathode.</b> The  Internal  structure  of  both  these  types  are  identical  except  for  
the  polarity  of  the  LEDs and common terminal.  The diagram below shows the internal structure of the common cathode seven-segment display(the one is used in this tutorial) and common anode 
seven-segment display.</p>

<p align="center">
  <img src="./images/7_seg/Circuit/commoncathode.jpg">
</p> 
<center>Figure 2:  Seven Segment Display with Common Cathode</center><br />


<p align="center">
  <img src="./images/7_seg/Circuit/commonannode.jpg">
</p> 
<center>Figure 3:  Seven Segment Display with Common Anode</center><br />

<ul>
 <li><p align="justify" class="main">The Common Cathode Display (CCD) – In the common cathode display, all the 
cathode connections  of  the  LED’s  are  joined  together  to  logic  “0”  or  ground. 
The  individual segments  are  illuminated  by  application  of  a  “HIGH”,  logic  “1”  signal 
 to  the  individual
Anode terminals.</p></li>

<li><p align="justify" class="main">The Common Anode Display (CAD) – In the common anode display, all the anode con-
nections  of  the  LED’s  are  joined  together  to  logic  “1”  and  the  
individual  segments  are
illuminated by connecting the individual Cathode terminals to a “LOW”, logic 
“0”  signal.</p></li>
</ul>

<p align="justify" class="main">But, seven segment display does not work by directly supplying voltage to different segments of LEDs. First, our decimal number is changed to its BCD equivalent signal 
then the BCD to seven segment decoder converts that signals to the a suitable format which is then fed to seven segment display.<br />
This BCD to seven segment decoder has four input lines (A, B, C and D) and 7 output lines (a,  b,  c,  d,  e,  f and g),  this output is given to seven segment LED 
display which displays the decimal number depending upon inputs.</p>

<p align="center">
  <img src="./images/7_seg/Circuit/bcd.png">
</p> 
<center>Figure 4:  Design of BCD Decoder 4:7</center><br />

<p align="center">
  <img src="./images/7_seg/Project/tabl1.png">
</p> 
<center>Truth Table for Seven Segment Display</center>


<center><h2>2. Code </center></h2>

***

<h3> 2.1  Verilog  HDL  code  for  Seven  Segment Display</h3>

<center><iframe id="ytplayer" type="text/html" width="640" height="360"
  src="https://www.youtube.com/embed/hMh8DQBPtUQ?autoplay=1&origin=http://example.com"
  frameborder="0"></iframe></center>

```verilog
/// Verilog code for sevent segment display
// Define module

module seven_segment (

input [3:0]bcd , // Define all I/O ports
output reg [6:0] display );

// Define Always block ,this block is executed every time the
// input BCD value changes .
always @ ( bcd )
begin

case (bcd )
4’ b0000 : display <=7 ’ b1111110 ;// output port ’display ’ is assigned with
// seven segment equivalent of input BCD (0)
4’ b0001 : display <=7 ’ b0110000 ;// output port ’display ’ is assigned with
// seven segment equivalent of input BCD (1)
4’ b0010 : display <=7 ’ b1101101 ;// output port ’display ’ is assigned with
// seven segment equivalent of input BCD (2)
4’ b0011 : display <=7 ’ b1111001 ;// output port ’display ’ is assigned with
// seven segment equivalent of input BCD (3)
4’ b0100 : display <=7 ’ b0110011 ;// output port ’display ’ is assigned with
// seven segment equivalent of input BCD (4)
4’ b0101 : display <=7 ’ b1011011 ;// output port ’display ’ is assigned with
// seven segment equivalent of input BCD (5)
4’ b0110 : display <=7 ’ b1011111 ;// output port ’display ’ is assigned with
// seven segment equivalent of input BCD (6)
4’ b0111 : display <=7 ’ b1110000 ;// output port ’display ’ is assigned with
// seven segment equivalent of input BCD (7)
4’ b1000 : display <=7 ’ b1111111 ;// output port ’display ’ is assigned with
// seven segment equivalent of input BCD (8)
4’ b1001 : display <=7 ’ b1111011 ;// output port ’display ’ is assigned with
// seven segment equivalent of input BCD (9)

default : display <=7 ’ b0000000 ;
endcase // end of case block

end // end of always block
endmodule
```

<h2>Test Bench </h2>

<h3> 2.2  Verilog  HDL Test  Bench  code  for  Seven  Segment  Display</h3>

```
/// Verilog code for test bench of sevensegment
// Define module
module tb_seven_segment ;

reg [3:0] bcd ; reg clk ; // Define the input
wire [6:0] display ; // Define the outputs
// Map the I/O ports with UUT
seven_segment uut (. bcd (bcd ) ,. display ( display ));

// Define Initial block
initial begin

bcd =4 ’ b0000 ; // Initialise the input ’bcd ’ value to ’0’

end

// Initialize input ports with different combination of BCD data
initial begin

bcd = 4’ b0001 ;#100;
bcd = 4’ b0011 ;#100;
bcd = 4’ b1000 ;#100;
bcd = 4’ b1001 ;#100;
#100;

end // end of initial block .
endmodule
```

<center><h2>3. Implementing on quartus II </center></h2>

***


<p align="justify" class="main">For  in-depth  guide  for  creating  a  <b>New  Project</b>  follow  <b>Getting Started with Quartus</b> section from Task 0. Verilog HDL code is provided in this 
tutorial.</p>

<ol>
<li>Create a <b>New Project</b> with the following settings.</li>


<p align="center">
  <img src="./images/7_seg/Project/Create1.png">
 </p>
<center>Figure 5:  Project Setting</center><br />

<li>Create  a  <b>New  Verilog HDL  file</b>.   As  we  will  be  demonstrating using  Verilog HDL code  so  select Verilog HDL  file. Use  the  code  for  Seven  Segment Display mentioned  above  in the  code  section in this document.</li>


<p align="center">
  <img src="./images/7_seg/Project/vhdl.png">
</p> 
<center>Figure 6:  Create a VHDL file</center><br />


<li><p align="justify" class="main">Go to <b>File Save as</b>. Enter the Name of file (it should be same as module/entity name), Enter correct file extension, for VHDL it is <b>.vhd</b> 
and for Verilog HDL it is <b>.v</b> and then
Click on <b>Save.</b></p></li>

<p align="center">
  <img src="./images/7_seg/Project/Create3.png">
</p> 
<center>Figure 7:  Save the file</center><br />

<li><p align="justify" class="main">Goto Project menu <b>Set as Top-Level  Entity</b>. The  Seven_Segment_SDisplay file  is  our main file and make sure you have selected this file while setting the top level 
entity.</p></li>

<p align="center">
  <img src="./images/7_seg/Project/Create4.png">
</p> 
<center>Figure 8:  Assign Top level Entity</center><br />


<li><p align="justify" class="main">Goto <b>Processing Start  Compilation</b>.  It takes sometime to complete. You can verify whether  all  the  files  are  compiled  successfully  by  checking  the highlighted  tabs  i.e. <b>Messages and Tasks tab.</b></p></li>

<p align="center">
  <img src="./images/7_seg/Project/Create5.png">
</p> 
<center>Figure 9:  Verification</center>

</ol>

<center><h2> 4. RTL Circuit of the implemented design</center></h2>

***

<p align="justify" class="main">
The Figure shown in step 2 below shows the RTL design of the Seven Segment 
Display circuit that  we  design  using  the  above  files.  Here  we  can  7  select  modules  
i.e  2:1  Muliplier,  and  one output and input block.  The select lines for the Multiplier are from the 4-Bit 
DataBus input and the 7-Bit DataBus is the data line.  If the input and the select lines 
matches for a particular
Multiplier the the its 7 bit data is passed to the output.</p>

<b>Steps  to  get  RTL  circuit.</b>
<ol>
<li>Goto <b>Tools→Netlist Viewers→RTL Viewer</b>.</li>

<p align="center">
  <img src="./images/7_seg/Project/Create6.png">
</p> 
<center>Figure 10:  Start RTL Viewer</center><br />


<li><p align="justify" class="main">The below figure shows the equivalent RTL circuit of BCD decoder (4:7) or 
the design of Seven Segment Display using behavioral modelling.</p></li>

<p align="center">
  <img src="./images/7_seg/Project/Create7.png">
</p> 
<center>Figure 11:  RTL Design for Seven Segment Display</center>
</ol>
 
<center><h2> 5. Implementing on Modelsim</center></h2>

***

<p align="justify" class="main">
For more detailed procedure on using ModelSim, refer <b>Getting Started with Quartus section</b> from Task 0. 
You can find Verilog HDL Testbench code below. </p>
<ol>
<li> Create a <b>New  Verilog HDL  file</b>.  Type in the Testbench code provided in this 
document and save the file with the same name as the module name.</li>

<p align="center">
  <img src="./images/7_seg/Project/Create11.png">
</p> 
<center>Figure 12:  Create a Test Bench</center><br />


<li>Go to <b>Assignments→Settings</b>.</li>

<li><p align="justify" class="main">Navigate to <b>Simulation</b> under <b>EDA  Tool  Settings</b>.Set the language as VHDL. 
Select <b>Compile Test Bench</b> and then click on <b>Test Benches</b>.  You can find a detailed 
tutorial for setting a Test Bench  file for simulation in the  <b>Getting Started with Quartus</b> section from Task 0.</p></li>

<li><p align="justify" class="main">Click on <b>Processing Start Compilation</b>. This process will check for any
illegal statement occured in any of the files and give the error messages in the Messages 
section.</p></li>
</ol>

<h3> 5.1 Without TestBench</h3>

<p align="justify" class="main">
We  can  simulate  our  design  without  using  a  testbench  file  by  using creating  a  University Program  VWF file.  You can find detailed steps to create and add Input and 
Output nodes in this files in the Task 0 document.</p>
<ol>
<li>Assign  clock  pulse  to  the  inputs  BCDNos[0  to  3]  as per  the given  table  and  run  the simulation.</li>


Input           |  Clock |
--------------- | -------|
DisplayLEDs[0]  |  50ns  |
DisplayLEDs[1]  |  100ns |
DisplayLEDs[2]  |  200ns |
DisplayLEDs[3]  |  400ns |

<center>Clock Pulse For Inputs</center>

<li><p align="justify" class="main">After  running  the  simulation  you  can  see  the  following  results, also  you  can  notice  for BCDNos "1010" to "1111" the output is zero because we mention the condition for 
input greater than 9 the output is null or zero.</p></li>

<p align="center">
  <img src="./images/7_seg/Simulation/Simulation5.png">
</p> 
<center>Figure 13:  Output Waveform</center><br />

</ol>
<b>Expanded form of above image</b>


<p align="center">
  <img src="./images/7_seg/Simulation/Simulation6.png">
</p> 
<center>Figure 14:  Expanded Output Waveform</center>

<h3> 5.2  Functional  Simulation  using  NativeLink  Feature</h3>
<ol>
<li><p align="justify" class="main">Then Go to <b>Tools -> Run Simulation Tool -> RTL Simulation</b> to automatically run the EDA simulator(ModelSim-Altera) and to compile all necessary design files.</p></li>

<p align="center">
  <img src="./images/7_seg/Simulation/Simulation1.png">
</p> 
<center>Figure 15:  Start RTL Simulation</center><br />

<li><p align="justify" class="main">Finally ModelSim-Altera tool opens, Add the I/O pins as shown in the below figure.  Double click on the testbench 
file under ’Library’ section,this adds the signals under ’Object’ section. Start the simulation and add the test bench file.Then select all the signals (A 
, B and C) and add it to ’wave’section.</p></li>

<p align="center">
  <img src="./images/7_seg/Simulation/Simulation2.png">
</p> 
<center>Figure 16:  Select TestBench file</center><br />


<p align="center">
  <img src="./images/7_seg/Simulation/Simulation3.png">
</p> 
<center>Figure 17:  Add I/O Signals</center><br />

<li>Start the simulation by clicking on the run all button in tool bar.</li>


<p align="center">
  <img src="./images/7_seg/Simulation/Simulation4.png">
</p> 
<center>Figure 18:  Simulation</center><br />


<li><p align="justify" class="main"><b>Navigating  the  simulation</b>   At this point you should have successfully 
run the simulation,  but the waveform window is rather small and hard to see.  We can move 
around in the simulation and see the value of the signals.  Look for the cursor, a 
yellow vertical line in the waveform viewer, with the time in yellow at the bottom.  You can 
use this line to move left or right in the waveform viewer and also zoom-in and zoom-out.</p></li>
</ol>

<center><h2> 6. Testing the Design</center></h2>

***

<h3> 6.1     Simulation  waveform  of  our  Design</h3>

The Result shown below can be verified by comparing it with the Truth Table.


<p align="center">
  <img src="./images/7_seg/Simulation/Simulation4.png">
</p> 
<center>Figure 19:  Final Output Waveform</center><br />
